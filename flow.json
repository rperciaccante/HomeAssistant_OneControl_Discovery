[
    {
        "id": "37cd53309e7f43c7",
        "type": "tab",
        "label": "One Control - Improved Discovery",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "17ba2a746cf7e369",
        "type": "tab",
        "label": "OneControl - Command and Event Stream",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4410210f.6939c",
        "type": "mqtt-broker",
        "name": "localhost",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "821eea9a8aee56e3",
        "type": "function",
        "z": "37cd53309e7f43c7",
        "name": "Normalize Node Records",
        "func": "var msg1 = {}\n\nmsg1.payload = {}\n/* Loop through incoming payload to rename the individual things so they can be better processed later */\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    var thing = {}\n    \n    thingTypeUID = msg.payload[i].thingTypeUID.replace(\"idsmyrv:\",\"\")\n    thingTypeUID = thingTypeUID.replace(\"-thing\",\"\")\n    \n    thingUID = msg.payload[i].UID.replace(\"-thing:\",\"_\")\n    thingUID = thingUID.replace(\"idsmyrv:\",\"\")\n    thingUID = thingUID.replace(/:/g,\"_\")\n    thingUID = thingUID.replace(/-/g,\"_\")\n    \n    /*\n    // This uses the _online channel as source of availability\n    availTopic =        msg.payload[i].UID.replace(/:/g,\"_\")\n    availTopic =        availTopic.replace(/-/g,\"_\") + \"_online\"\n    availTopic =        \"smarthome/items/\" + availTopic + \"/state\"\n    availTopicOn =      \"on\"\n    availTopicOff =     \"off\"\n    availAttr =         \"value\"\n    */\n    \n    // This uses the device online state for availability\n    availTopic =        \"smarthome/things/\" + msg.payload[i].UID + \"/status\"\n    availTopicOn =      \"online\"\n    availTopicOff =     \"offline\"\n    availAttr =         \"status\"\n    \n    \n    label = msg.payload[i].label.replace(\" Thing\",\"\")\n    label = label.replace(\"OneControl \",\"\")\n\n    //thing.hass = {}\n    msg1.thing  =                   msg.payload[i]\n    msg1.thing.hass =                {\"label\":                  label,\n                                    \"thingConfig_OC\":           msg.payload[i].configuration,\n                                    \"UID_oc\":                   msg.payload[i].UID,\n                                    \"UID_ha\":                   thingUID,\n                                    \"thingTypeUID_oc\":          msg.payload[i].thingTypeUID,\n                                    \"thingTypeUID_ha\":          thingTypeUID,\n                                    \"thingChannelCount\":        msg.payload[i].channels.length,\n                                    \"availabilityTopic\":        availTopic,\n                                    \"availabilityTopicOn\":      availTopicOn,\n                                    \"availabilityTopicOff\":     availTopicOff,\n                                    \"availabilityTopicAttr\":    availAttr,\n                                    \"stateTopic\":               global.get(\"MQTTDiscoveryTopic\") +\"/binary_sensor/\" + thingUID + \"/status\"\n                                }\n    \n    //msg1.payload = thing\n    /* Send each thing record as a new message to split up the array and process the things individually */\n    \n    node.send(msg1)\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 180,
        "wires": [
            [
                "804b7ea9d646f078",
                "2e15ae3df57ccf24"
            ]
        ]
    },
    {
        "id": "804b7ea9d646f078",
        "type": "change",
        "z": "37cd53309e7f43c7",
        "name": "Re-order for Splitting Channels",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "thing.channels",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 220,
        "wires": [
            [
                "fbf9f821bc1fedae"
            ]
        ]
    },
    {
        "id": "fbf9f821bc1fedae",
        "type": "split",
        "z": "37cd53309e7f43c7",
        "name": "Split Channels",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "foo",
        "x": 240,
        "y": 260,
        "wires": [
            [
                "a036b5886cf9fc5c"
            ]
        ]
    },
    {
        "id": "e4928971061b138e",
        "type": "join",
        "z": "37cd53309e7f43c7",
        "name": "Consolidate Channels",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 220,
        "y": 380,
        "wires": [
            [
                "2cb9bda024050c2b"
            ]
        ]
    },
    {
        "id": "2cb9bda024050c2b",
        "type": "change",
        "z": "37cd53309e7f43c7",
        "name": "Reorganize Message",
        "rules": [
            {
                "t": "set",
                "p": "thing.channels",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 420,
        "wires": [
            [
                "e38335e02f339147",
                "2ba610ca88330d4c",
                "b17f6bae850dcd47"
            ]
        ]
    },
    {
        "id": "abd9838bbafe22b2",
        "type": "inject",
        "z": "37cd53309e7f43c7",
        "name": "Click here to start process",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 210,
        "y": 60,
        "wires": [
            [
                "488f3907e399b279"
            ]
        ]
    },
    {
        "id": "9dd8d56a1b8b6919",
        "type": "comment",
        "z": "37cd53309e7f43c7",
        "name": "PLEASE READ ME BEFORE RUNNING",
        "info": "Make sure you read and understand the settings in the \"Process Configuration\" before you run.\n\nNodes with an * at the end of their name include node-specific information in the Description tab of those nodes.  Please review.",
        "x": 220,
        "y": 20,
        "wires": []
    },
    {
        "id": "e38335e02f339147",
        "type": "function",
        "z": "37cd53309e7f43c7",
        "name": "Build Node Diagnostic Entities",
        "func": "// This node generates sensors that contain the diagnostic values for the device (not the individual sensors)\n\nfunction capitolizeFirst(string) {\n var output = string.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n return output;\n}\nmsg.payload = \"\"\n    for (const property in msg.thing.configuration) {\n        baseTopic  =                    global.get(\"MQTTDiscoveryTopic\") + \"/sensor/\" + msg.thing.hass.UID_ha + \"/\" + property\n        msg.topic =  baseTopic + \"/config\"\n        \n        switch(property){\n            case \"deviceType\":\n                name = msg.thing.label + \" Device Type\"\n                break;\n            case \"deviceInstance\":\n                name = msg.thing.label + \" Device Instance\"\n                break;\n            case \"capability\":\n                name = msg.thing.label + \" Capability\"\n                break;\n            case \"productID\":\n                name = msg.thing.label + \" Product ID\"\n                break;\n            case \"functionName\":\n                name = msg.thing.label + \" Function Name\"\n                break;\n            case \"functionInstance\":\n                name = msg.thing.label + \" Function Instance\"\n                break;\n            case \"mac\":\n                name = msg.thing.label + \" MAC Address\"\n                break;\n            default:\n                name = property\n                break;\n        }\n    \n        msg.payload = {\n            \"name\":                 name,\n            \"object_id\":            global.get(\"namePrecursor\") + name,\n            \"unique_id\":            msg.thing.hass.UID_ha + \"_\" + property,\n            \"entity_category\":      \"diagnostic\",\n            \"state_topic\":          baseTopic + \"/state\",\n            \"availability\":         {\"topic\":                       msg.thing.hass.availabilityTopic,\n                                    \t\"payload_available\":        msg.thing.hass.availabilityTopicOn,\n                                    \t\"payload_not_available\":    msg.thing.hass.availabilityTopicOff,\n                                    \t\"value_template\":           \"{{ value_json.\" + msg.thing.hass.availabilityTopicAttr + \" }}\", \n                                        },\n            \"device\":               {\"manufacturer\":       global.get(\"manufacturer\"), \n                                        \"via_device\":       global.get(\"via_device\"),\n                                        \"identifiers\":      msg.thing.hass.UID_ha, \n                                        \"name\":             msg.thing.label, \n                                        \"model\":            global.get(\"model\") + \": \" + msg.thing.hass.UID_ha,\n                                        \"sw_version\":       global.get(\"sw_version\")\n                                    },\n\n            \"enabled_by_default\":   true\n            \n        } \n\n      node.send(msg)\n      // Send the default values from the config to the MQTT topic for the attribute above\n      msg1 = {}\n      msg1.topic = baseTopic + \"/state\"\n      msg1.payload = msg.thing.configuration[property]\n      node.send(msg1)\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 400,
        "wires": [
            [
                "d8b59c5d76ea73f1"
            ]
        ]
    },
    {
        "id": "d8b59c5d76ea73f1",
        "type": "link out",
        "z": "37cd53309e7f43c7",
        "name": "",
        "mode": "link",
        "links": [
            "2028c9e47a75c7b0"
        ],
        "x": 835,
        "y": 480,
        "wires": []
    },
    {
        "id": "2ba610ca88330d4c",
        "type": "switch",
        "z": "37cd53309e7f43c7",
        "name": "Process Special Device Types",
        "property": "thing.hass.thingTypeUID_ha",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "hvac",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 480,
        "wires": [
            [
                "5f1845e5c666636f"
            ]
        ]
    },
    {
        "id": "5f1845e5c666636f",
        "type": "function",
        "z": "37cd53309e7f43c7",
        "name": "Build HVAC Device",
        "func": "i = msg.thing.UID.replace(/:/g,\"_\")\ni = i.replace(\"-\",\"_\")\n\ndiscoveryBaseTopic = global.get(\"MQTTDiscoveryTopic\") + \"/climate/\" + msg.thing.hass.UID_ha + \"/hvac\"\nmsg.topic = discoveryBaseTopic + \"/config\"\n\nmsg.payload =   {\n                \"name\":                    msg.thing.label,\n                \"object_id\":                global.get(\"namePrecursor\") + msg.thing.label,\n                \"unique_id\":                i,\n                \"enabled_by_default\":       \"true\",\n                \"availability\":         {\"topic\":                      msg.thing.hass.availabilityTopic,\n                                        \"payload_available\":        msg.thing.hass.availabilityTopicOn,\n                            \t        \"payload_not_available\":    msg.thing.hass.availabilityTopicOff,\n                            \t        \"value_template\":           \"{{ value_json.\" + msg.thing.hass.availabilityTopicAttr + \" }}\", \n                                },\n                \"device\": {\n                    \"manufacturer\":                 global.get(\"manufacturer\"),\n                    \"via_device\":                   global.get(\"via_device\"),\n                    \"identifiers\":                  msg.thing.hass.UID_ha,\n                    \"name\":                         msg.thing.hass.label,\n                    \"model\":                        \"OneControl: \"+ msg.thing.hass.UID_ha,\n                    \"sw_version\":                   \"1.0\"\n                    },\n                \"action_topic\":                     \"smarthome/items/\"+i+\"_status/state\",\n                \"action_template\":                  \"{{ value_json.value }}\",\n                \"current_temperature_topic\":        \"smarthome/items/\"+i+\"_inside_temperature/state\",\n                \"current_temperature_template\":     \"{{ value_json.value }}\",\n                \"fan_mode_command_topic\":           \"smarthome/items/\"+i+\"_fan_mode/set\",\n                \"fan_mode_state_topic\":             \"smarthome/items/\"+i+\"_fan_mode/state\",\n                \"fan_mode_state_template\":          \"{{ value_json.value }}\",\n                \"fan_modes\":                        [\"auto\", \n        \t                                            \"low\", \n        \t                                            \"high\"],\n        \t    \"mode_command_topic\":               \"smarthome/items/\"+i+\"_hvac_mode/set\",\n                \"mode_state_topic\":                 \"smarthome/items/\"+i+\"_hvac_mode/state\",\n            \t\"mode_state_template\":              \"{{ value_json.value }}\",\n            \t\"modes\":                            [\"heat\", \n            \t                                        \"cool\",\n            \t                                        \"heat_cool\",\n            \t                                        \"off\"],\n            \t\"min_temp\":                         45,\n            \t\"max_temp\":                         100,\n            \t\"precision\":                        1,\n            \t\"retain\":                           true,\n            \t\"temperature_high_command_topic\":   \"smarthome/items/\"+i+\"_high_temperature/set\",\n            \t\"temperature_high_state_topic\":     \"smarthome/items/\"+i+\"_high_temperature/state\",\n            \t\"temperature_high_state_template\":  \"{{ value_json.value }}\",\n            \t\"temperature_low_command_topic\":    \"smarthome/items/\"+i+\"_low_temperature/set\",\n            \t\"temperature_low_state_topic\":      \"smarthome/items/\"+i+\"_low_temperature/state\",\n            \t\"temperature_low_state_template\":   \"{{ value_json.value }}\",\n            \t\"temp_step\":                        1,\n    }\n\nnode.send(msg)\ndiscoveryBaseTopic = global.get(\"MQTTDiscoveryTopic\") + \"/sensor/\" + msg.thing.hass.UID_ha + \"/device_mode\"\nmsg.topic = discoveryBaseTopic + \"/config\"\nmsg.payload =   {\n                \"name\":                    msg.thing.label + \" Device State\",\n                \"object_id\":                global.get(\"namePrecursor\") + msg.thing.label + \" Device State\",\n                \"unique_id\":                i + \"_device_state\",\n                \"enabled_by_default\":       \"true\",\n                \"availability\": {\n                \t\"topic\":                    msg.thing.hass.availabilityTopic,\n                \t\"payload_available\":        \"online\",\n                \t\"payload_not_available\":    \"offline\",\n                \t\"value_template\":           \"{{ value_json.status }}\", \n                },\n                \"device\": {\n                    \"manufacturer\":                 global.get(\"manufacturer\"),\n                    \"via_device\":                   global.get(\"via_device\"),\n                    \"identifiers\":                  msg.thing.hass.UID_ha,\n                    \"name\":                         msg.thing.hass.label,\n                    \"model\":                        \"OneControl: \"+ msg.thing.hass.UID_ha,\n                    \"sw_version\":                   \"1.0\"\n                    },\n                \"entity_category\":                  \"diagnostic\",\n                \"state_topic\":                     \"smarthome/items/\"+i+\"_status/state\",\n                \"value_template\":                  \"{{ value_json.value }}\"\n}\nnode.send(msg)\n/*\n\nmsg.payload.hass.attributes.topic = discoveryBaseTopic + \"/attributes\"\n\n*/\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 480,
        "wires": [
            [
                "d8b59c5d76ea73f1"
            ]
        ]
    },
    {
        "id": "a036b5886cf9fc5c",
        "type": "function",
        "z": "37cd53309e7f43c7",
        "name": "Pre-Process Individual Channels",
        "func": "function capitolizeFirst(string) {\n var output = string.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});\n return output;\n}\nvar msg1 = {}\nmsg1.debug = {}\nvar channel = {}\n\nchannelRaw =                msg.payload\n//msg.payload =               {}\nchannelUID =                channelRaw.uid.replace(\"idsmyrv:\",\"\")\nchannelUID =                channelUID.replace(\"-thing:\",\"_\")\nchannelUID =                channelUID.replace(/-/g,\"_\")\nchannelTypeUID =            channelRaw.channelTypeUID.replace(\"idsmyrv:\",\"\")\nchannelUID_ha =             channelRaw.uid.replace(/:/g,\"_\")\nchannelUID_ha =             channelUID_ha.replace(/-/g,\"_\")\n\nmsg.payload.hass = {}\n\nmsg.payload.hass = {\n    \"label_ha\":                     msg.thing.hass.label + \" \" + capitolizeFirst(channelRaw.id),\n    \"channelUID_oc\":                channelRaw.uid,\n    \"channelUID_ha\":                channelUID_ha,\n    \"id_oc\":                        channelRaw.id,\n    \"valueType_oc\":                 channelRaw.itemType.toLowerCase(),\n    \"channelType_ha\":               msg.thing.hass.thingTypeUID_ha +\":\"+channelRaw.id,\n    \"kind\":                         channelRaw.kind.toLowerCase(),\n    \"topicItemStateEvent\":          \"smarthome/items/\" + channelUID_ha + \"/state\",\n    \"topicThingStatusInfoEvent\":    \"smarthome/things/\" + msg.thing.UID + \"/status\",\n    \"topicItemStateChangedEvent\":   \"smarthome/items/\" + channelUID_ha + \"/statechanged\",\n    \"topicItemCommandEvent\":        \"smarthome/items/\" + channelUID_ha + \"/command\",\n    \"topicItemCommandSend\":         \"smarthome/items/\" + channelUID_ha + \"/set\"\n                            }  \n\n// Build base discovery content \n\n\nbasePayload =                       {\"name\":                    msg.payload.hass.label_ha,\n                                    \"object_id\":                global.get(\"namePrecursor\") + msg.payload.hass.label_ha,\n                                    \"unique_id\":                msg.payload.hass.channelUID_ha,\n                                    \"enabled_by_default\":       \"true\",\n                                    \"state_topic\":              msg.payload.hass.topicItemStateEvent,\n                                    \"value_template\":           \"{{ value_json.value }}\", \n                                    \"availability\": {\n                                    \t\"topic\":                    msg.thing.hass.availabilityTopic,\n                                    \t\"payload_available\":        msg.thing.hass.availabilityTopicOn,\n                                    \t\"payload_not_available\":    msg.thing.hass.availabilityTopicOff,\n                                    \t\"value_template\":           \"{{ value_json.\" + msg.thing.hass.availabilityTopicAttr + \" }}\", \n                                        },\n                                    \"device\": {\n                                        \"manufacturer\":         global.get(\"manufacturer\"),\n                                        \"via_device\":           global.get(\"via_device\"),\n                                        \"identifiers\":          msg.thing.hass.UID_ha,\n                                        \"name\":                 msg.thing.hass.label,\n                                        //\"connections\":          [[\"mac\", msg.thing.configuration.mac],[\"foo\",\"bar\"]],\n                                        \"model\":                global.get(\"model\") + \": \" + msg.thing.hass.UID_ha,\n                                        \"sw_version\":           global.get(\"sw_version\")\n                                        }\n    }\n\n\n//var channel = {} // Used to add entity-specific attributes to the payload\n\n//Set generic entity types based on OpenHab channel itemTypes \nswitch(msg.payload.hass.channelType_ha){\n    case \"light:dimmer\":\n        msg.payload.hass.entityType_ha = \"light\"\n        break;\n    case \"switched-light:switch\":\n        msg.payload.hass.entityType_ha = \"light\"\n        break;\n    default:\n        msg.payload.hass.entityType_ha = \"sensor\"\n        break;\n}\n\nmsg.payload.hass.discovery = {}\nmsg.payload.hass.attributes = {}\nmsg.payload.hass.discovery.payload = basePayload\nmsg.payload.hass.attributes.payload = msg.thing.configuration\nreturn [msg,msg]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 300,
        "wires": [
            [
                "9eed141bbf039802",
                "bb217550c86ff353"
            ],
            [
                "dc2b8622782d0927"
            ]
        ]
    },
    {
        "id": "dc2b8622782d0927",
        "type": "switch",
        "z": "37cd53309e7f43c7",
        "name": "Exclude Special Devices",
        "property": "thing.hass.thingTypeUID_ha",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "rgb-light",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 340,
        "wires": [
            [],
            [
                "d14b920aaf53a08f"
            ]
        ]
    },
    {
        "id": "d14b920aaf53a08f",
        "type": "function",
        "z": "37cd53309e7f43c7",
        "name": "Process Channels",
        "func": "addPayload = {}\n\nif (msg.payload.hass.channelType_ha.includes(\":\") === true ) {\n    channel = msg.payload.hass.channelType_ha.split(\":\")\n    channelType = channel[1]\n} else {\n    channel = msg.payload.hass.channelType_ha\n}\n\ndiscoveryPayload = msg.payload.hass.discovery.payload\n\n// Add device additional details as needed based on channel types\nif (channelType.includes(\"voltage\") === true ) {\n        addPayload = {\n                \"device_class\":     \"voltage\"\n            }\n    }\n\nif (channelType.includes(\"current\") === true ) {\n        addPayload = {\n                \"device_class\":             \"current\",\n                \"unit_of_measurement\":      \"A\"\n            }\n    }\n\nif (channelType.includes(\"dimmer\") === true ) {\n        baseTopic_oc = \"smarthome/items/\" + msg.payload.hass.channelUID_ha\n        baseName = msg.thing.hass.UID_oc.replace(/:/g,\"_\")\n        baseName = \"smarthome/items/\" + baseName.replace(/-/,\"_\")\n        delete msg.payload.hass.discovery.payload.value_template\n        \n        addPayload = {\n            \"state_topic\":              baseName + \"_switch/state\",\n            \"command_topic\":            baseTopic_oc + \"/set\",\n            \"brightness_state_topic\":   baseName + \"_brightness/state\",\n            \"brightness_command_topic\": baseTopic_oc + \"/set\",\n            \"payload_on\":               \"on\",\n            \"payload_off\":              \"off\",\n            \"brightness_scale\":         100,\n            \"on_command_type\":          \"last\",\n            \"qos\":                      0,\n            \"effect_state_topic\":       baseName + \"_mode/state\",\n            \"effect_command_topic\":     baseName + \"_mode/set\",\n            \"effect_list\":              [\"off\",\"dimmer\",\"blink\",\"swell\"]\n       }\n    }\n\nif (channelType.includes(\"fault\") === true) {\n        msg.payload.hass.entityType_ha = \"binary_sensor\"\n        addPayload = {\n                \"device_class\":             \"problem\",\n                \"payload_on\":               \"on\",\n                \"payload_off\":              \"off\",\n                \"entity_category\":          \"diagnostic\"\n                }\n    }\n    \nif (channelType.includes(\"output-disable\") === true) {\n        msg.payload.hass.entityType_ha = \"sensor\"\n        addPayload = {\n                \"entity_category\":          \"diagnostic\"\n                }\n    }\n\n\nif (channelType.includes(\"temperature\") === true ) {\n        addPayload = {\n                \"device_class\":                 \"temperature\",\n                \"unit_of_measurement\":          \"°F\"\n                }\n    }\n\nif (channelType.includes(\"online\") === true ) {\n        msg.payload.hass.entityType_ha =        \"binary_sensor\"\n        addPayload = {\n                \"device_class\":                 \"connectivity\",\n                \"payload_on\":                   \"on\",\n                \"payload_off\":                  \"off\",\n                \"entity_category\":              \"diagnostic\"\n                }\n    }\n    \nif (channelType.includes(\"output-disable-cause\") === true ) {\n        addPayload = {\n                \"entity_category\":              \"diagnostic\"\n                }\n    }\n    \nif (channelType.includes(\"percent\") === true ) {\n    if (msg.payload.hass.id_oc == \"position\") {\n                addPayload = {\n                    \"unit_of_measurement\":          '%',\n                    \"value_template\":               '{{ (((value_json |float)/255)*100)|round(0) }}'\n                }\n            } \n    }\n\nif (channelType.includes(\"sleep\") === true) {\n        msg.payload.hass.entityType_ha =        \"number\"\n        addPayload = {\n                \"command_topic\":                msg.payload.hass.topicItemCommandSend,\n                \"qos\":                          0,\n                \"unit_of_measurement\":          \"mins.\",\n                \"step\":                         1,\n                \"min\":                          0,\n                \"max\":                          120,\n                \"icon\":                         \"mdi:timer\"\n                }\n    }\n\nif (channelType.includes(\"switch\") === true &&\n    channelType.includes(\"switched-light\") != true) {\n        msg.payload.hass.entityType_ha =        \"switch\"\n        addPayload = {\n                \"command_topic\":                msg.payload.hass.topicItemCommandSend,\n                \"payload_on\":                   \"on\",\n                \"payload_off\":                  \"off\",\n                \"state_on\":                     \"on\",\n                \"state_off\":                    \"off\"\n                }\n    }\n\nif (channelType.includes(\"switched-light\") === true) {\n        msg.payload.hass.entityType_ha =        \"light\"\n        addPayload = {\n                \"command_topic\":                msg.payload.hass.topicItemCommandSend,\n                \"payload_on\":                   \"on\",\n                \"payload_off\":                  \"off\",\n                \"state_on\":                     \"on\",\n                \"state_off\":                    \"off\"\n                }\n    }\n    \nif (channelType.includes(\"tank-level\") === true ) {\n        addPayload = {\n                \"icon\":                         \"mdi:water-percent\",\n                \"unit_of_measurement\":          \"%\"\n                }\n    }\n\n// These sensors are unknown in their purpose, so we create them, but do not enable them unless we want to.\nif (channelType.includes(\"time1\") === true || channelType.includes(\"time2\") === true ) {\n        msg.payload.hass.discovery.payload.enabled_by_default = false\n    }\n\n    \ndiscoveryBaseTopic = global.get(\"MQTTDiscoveryTopic\") + \"/\" + msg.payload.hass.entityType_ha + \"/\" + msg.thing.hass.UID_ha + \"/\" + msg.payload.hass.id_oc\nmsg.payload.hass.discovery.topic = discoveryBaseTopic + \"/config\"\nmsg.payload.hass.attributes.topic = discoveryBaseTopic + \"/attributes\"\nmsg.payload.hass.discovery.payload = {...discoveryPayload,...addPayload }\n\nmsg1 = {}\nmsg1.topic = msg.payload.hass.discovery.topic\nmsg1.payload = msg.payload.hass.discovery.payload\nreturn [msg1,msg];\n\n/*\nmsg.payload.hass.entityType_ha = \"number\"\n//msg.payload.hass.baseTopic = global.get('MQTTDiscoveryTopic') + \"/\" + msg.payload.hass.entityType_ha + \"/\" + msg.thing.hass.UID_ha + \"/\" + msg.payload.hass.id_oc\n\nbaseTopic_oc = \"smarthome/things/\" + msg.payload.hass.channelUID_ha\n\nmsg.payload.hass.discovery.payload.name += \" Timer\"\nvar discoveryPayload = {\n            \"command_topic\":            baseTopic_oc + \"/set\",\n            \"qos\":                      0,\n            \"unit_of_measurement\":      \"mins.\",\n            \"step\":                     1,\n            \"min\":                      0,\n            \"max\":                      120,\n            \"icon\":                     \"mdi:timer\"\n}\n\n*/",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 340,
        "wires": [
            [
                "1c5ccbe440e664ff",
                "d8b59c5d76ea73f1"
            ],
            [
                "e4928971061b138e"
            ]
        ]
    },
    {
        "id": "4f129ea4784fa29a",
        "type": "mqtt out",
        "z": "37cd53309e7f43c7",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4410210f.6939c",
        "x": 1230,
        "y": 120,
        "wires": []
    },
    {
        "id": "1377a02e8a1fc1c7",
        "type": "debug",
        "z": "37cd53309e7f43c7",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 320,
        "wires": []
    },
    {
        "id": "51683dae441fdcae",
        "type": "yaml",
        "z": "37cd53309e7f43c7",
        "property": "payload",
        "name": "",
        "x": 1230,
        "y": 200,
        "wires": [
            [
                "0836c773e397e053"
            ]
        ]
    },
    {
        "id": "3fcf0a9639995831",
        "type": "file",
        "z": "37cd53309e7f43c7",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 320,
        "wires": [
            [
                "1377a02e8a1fc1c7"
            ]
        ]
    },
    {
        "id": "024d6825b87c72ac",
        "type": "function",
        "z": "37cd53309e7f43c7",
        "name": "JSON Filename",
        "func": "msg.filename = msg.filename +\".json\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 240,
        "wires": [
            [
                "3fcf0a9639995831"
            ]
        ]
    },
    {
        "id": "64e470b0221a0bfa",
        "type": "json",
        "z": "37cd53309e7f43c7",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 1230,
        "y": 240,
        "wires": [
            [
                "024d6825b87c72ac"
            ]
        ]
    },
    {
        "id": "d8c4032429c482e3",
        "type": "function",
        "z": "37cd53309e7f43c7",
        "name": "File Options",
        "func": "// Must be enable in the \"Set Flow Variables\" node\nif(msg.topic.includes(\"/config\") === true) {\n    if (flow.get(\"saveFiles\") === true ) {\n        i = msg.topic.split(\"/\")\n        name = msg.payload.object_id.replace(/ /g,\"_\")\n        msg.filename = flow.get(\"saveFilesTo\") + msg.payload.device.name + \"/\" + i[1] + \"/\" + msg.payload.name\n        if (global.get(\"filesNoDiscovery\") == true) {\n            delete msg.payload.device\n            delete msg.payload.enabled_by_default\n            }\n        return msg;\n        }\n    }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 200,
        "wires": [
            [
                "51683dae441fdcae",
                "64e470b0221a0bfa",
                "6fc4064a3b787b13"
            ]
        ]
    },
    {
        "id": "0836c773e397e053",
        "type": "function",
        "z": "37cd53309e7f43c7",
        "name": "YAML Filename",
        "func": "msg.filename = msg.filename +\".yaml\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 200,
        "wires": [
            [
                "3fcf0a9639995831"
            ]
        ]
    },
    {
        "id": "6fc4064a3b787b13",
        "type": "debug",
        "z": "37cd53309e7f43c7",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 160,
        "wires": []
    },
    {
        "id": "2028c9e47a75c7b0",
        "type": "link in",
        "z": "37cd53309e7f43c7",
        "name": "",
        "links": [
            "d8b59c5d76ea73f1"
        ],
        "x": 895,
        "y": 180,
        "wires": [
            [
                "d8c4032429c482e3",
                "f54d3c4ab81f3b8f"
            ]
        ]
    },
    {
        "id": "2a15af7196862eb0",
        "type": "http request",
        "z": "37cd53309e7f43c7",
        "name": "Get OneControl Components",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://192.168.1.4:8080/rest/things/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 200,
        "y": 140,
        "wires": [
            [
                "821eea9a8aee56e3"
            ]
        ]
    },
    {
        "id": "488f3907e399b279",
        "type": "function",
        "z": "37cd53309e7f43c7",
        "name": "Process Configuration",
        "func": "/**\n OneControl Auto Discovery into Home Assistant\n \n This process will integrate your Lippert OneControl components into Home Assistance\n\t(http://www.home-assistant.io)\n \n Use this file to set the bahavior of the process of pulling devices from the OneControl system\n*/\n\n\n// When the information is pulled from the OneControl system, you have the option to write the information\n//   to files on the local system, as both YAML and JSON.  These can be used to help troubleshoot, or you can \n//   us the YAML output as the config files for Home Assistant. Set to \"true\" to have the output files written\n//   to disk.  If files exist, they will be overwritten.\n// ** NOTE ** These files are NOT needed for this process to work, and are for troubleshooting/stand alone use.\n//     default:\n//          saveFiles = false\nsaveFiles = false;\n\n// When files are saved, they are saved as YAML and JSON, but include the attributes needed for Discovery, and\n//   cannot be used for static YAML configuration without certain sections removed. Set this to true to remove\n//   the discovery-related sections.\n// ** NOTE ** \n// You will still need to use the \"OneControl - Command and Event Stream\" flow to process events to align with the \n//   MQTT topics that are part of the configuration files\n//     default:\n//          filesNoDiscovery = false\nfilesNoDiscovery = false;\n\n// This is where you define the destination for the files if you are using the tool \n//     default: \n//          saveFilesTo = '/config/OneControl/'\nsaveFilesTo = '/config/OneControl/';\n\n// If you do not want to send the configuration to the MQTT server, set this to \"false\"\n//     default: \n//          sendToMQTT = true\nsendToMQTT = true;\n\n// If you want to have MQTT discovery messages retained between restarts, set this option to \"true\"\n// If you do not set this to true, your Home Assistant OneControl entities will be in an error state until you\n//   run the discovery script again.  This is due to how Home Assistant stores entity information.\n//     default: \n//          retainMQTT = true\nretainMQTT = true;\n\n// When you initially create the entities in Home Assistant, it can take a long\n//   time before an availability message is published from OneControl, sometimes \n//   upwards of 30 minutes.  This is because OneControl publishes changes in real\n//   time, but non-change status messages much less frequently.  This can be frustrating\n//   when initially creating the entities.\n// Enable this setting to generate an \"online\" message when you do the initial \n//   installation, which will show the entitied as \"online\" immediately.  If the\n//   entities are truly offline, you will not be able to run the discovery process\n//   without an error, so enabling this is low (but not no) risk.  Please note\n//   that this will only occur once at the time the discovery process is run.\n// If you enable this, the device's \"Online Status Details\" sensor value will be\n//   'Initial Discovery' until OneControl publishes an official message.  It is not uncommon\n//   to see the online entity listed as \"Disconnected\" until this first message is received.\n//     default: \n//          startupAvailMsg = true\nstartupAvailMsg = true;\n\n// Often when you make changes, you may need to remove all the entities created.\n//   This option will enable the process to remove all entities created in previous\n//   run AS LONG AS NO OTHER SETTINGS HAVE CHANGED (this depends on the deiscovery\n//   topic to be the same).\n//   Note: sendToMQTT must also be enabled\n//     default:\n//          deleteAll = false;\ndeleteAll = false;\n\n// Home Assistant requires the definition of the topic used for discovery.  \n// For more info on what is needed, review the Home Assistant documentation here:\n//    https://www.home-assistant.io/docs/mqtt/discovery/\n// This value needs to match what is entered into your configuration.yaml file\n// configuration.yaml example:\n//     mqtt:\n//          discovery:          true\n//          discovery_prefix:   'homeassistant'\n//\n//     default:\n//          MQTTDiscoveryTopic = 'homeassistant'\nMQTTDiscoveryTopic = 'homeassistant';\n\n// Part of the discovery output is the definition of the manufacturer the component.\n//     default: \n//          manufacturer = 'Lippert Components'\nmanufacturer = 'Lippert Components';\n\n// Part of the discovery output is the definition of the device that is used to \n//   connect to the individual nodes.\n//     default:\n//          via_device = 'OneControl Gateway';\nvia_device = 'OneControl Gateway';\n\n// Part of the discovery output is the definition of the model the component.\n//     default:\n//          model = 'OneControl';\nmodel = 'OneControl';\n\n// when the Home Assistant entity is created, you can prepend this string to the\n//   entityID: 'sensor.example' would become 'sensor.namePresursor_example'\n//     default:\n//          namePrecursor= 'OneControl '\nnamePrecursor = 'OneControl ';\n\n\n\n/* ############ Do not change anything below this line ############ */\nRelease_Version = '2022.01.10a'\n\nflow.set(\"saveFiles\",saveFiles);\nflow.set(\"saveFilesTo\",saveFilesTo);\nflow.set(\"sendToMQTT\",sendToMQTT);\nflow.set(\"startupAvailMsg\",startupAvailMsg);\n\nglobal.set(\"MQTTDiscoveryTopic\",MQTTDiscoveryTopic);\nglobal.set(\"sw_version\",Release_Version);\nglobal.set(\"manufacturer\",manufacturer);\nglobal.set(\"via_device\",via_device);\nglobal.set(\"model\",model);\nglobal.set(\"namePrecursor\",namePrecursor);\nglobal.set(\"deleteAll\",deleteAll);\nglobal.set(\"retainMQTT\",retainMQTT);\nglobal.set(\"filesNoDiscovery\",filesNoDiscovery);\nreturn msg;\n/*\n * Copyright Robert Perciaccante\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n**/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 100,
        "wires": [
            [
                "2a15af7196862eb0"
            ]
        ]
    },
    {
        "id": "f54d3c4ab81f3b8f",
        "type": "function",
        "z": "37cd53309e7f43c7",
        "name": "MQTT Options",
        "func": "if (flow.get(\"sendToMQTT\") == true) {\n    if (global.get(\"deleteAll\") == true) {\n        msg.payload = null\n        msg.retain = true;\n        }\n    if (global.get(\"retainMQTT\") == true) {\n        msg.retain = true;\n        }\n    return msg;\n    }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 120,
        "wires": [
            [
                "b17b354fe9701c18",
                "4f129ea4784fa29a"
            ]
        ]
    },
    {
        "id": "b17b354fe9701c18",
        "type": "debug",
        "z": "37cd53309e7f43c7",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 80,
        "wires": []
    },
    {
        "id": "b17f6bae850dcd47",
        "type": "function",
        "z": "37cd53309e7f43c7",
        "name": "Custom Sensors and Tools",
        "func": "// This sensor displays any additional status details if the state is anything other than online\nname = msg.thing.label + \" Online Status Details\"\nproperty = \"online_status_details\"\nbaseTopic  =  global.get(\"MQTTDiscoveryTopic\") + \"/sensor/\" + msg.thing.hass.UID_ha + \"/\" + property\nmsg.topic =  baseTopic + \"/config\"\n\n\nmsg.payload = {\n    \"name\":                 name,\n    \"object_id\":            global.get(\"namePrecursor\") + name,\n    \"unique_id\":            msg.thing.hass.UID_ha + \" \" + property,\n    \"entity_category\":      \"diagnostic\",\n    \"state_topic\":          msg.thing.hass.availabilityTopic,\n    \"value_template\":       \"{{ value_json.statusDetail }}\",\n    \"availability\":         {\"topic\":                      msg.thing.hass.availabilityTopic,\n                            \t\"payload_available\":        msg.thing.hass.availabilityTopicOn,\n                            \t\"payload_not_available\":    msg.thing.hass.availabilityTopicOff,\n                            \t\"value_template\":           \"{{ value_json.\" + msg.thing.hass.availabilityTopicAttr + \" }}\", \n                                },\n    \"device\":                {\"manufacturer\":       global.get(\"manufacturer\"), \n                                \"via_device\":       global.get(\"via_device\"),\n                                \"identifiers\":      msg.thing.hass.UID_ha, \n                                \"name\":             msg.thing.label, \n                                \"model\":            global.get(\"model\") + \": \" + msg.thing.hass.UID_ha,\n                                \"sw_version\":       global.get(\"sw_version\")\n                                },\n\n    \"enabled_by_default\":   true\n    \n} \nnode.send(msg)\n if (flow.get(\"startupAvailMsg\") === true) {\n     msg.payload = '{\"status\":\"online\",\"statusDetail\":\"Initial Discovery\"}'\n     msg.topic = msg.thing.hass.availabilityTopic\n     node.send(msg)\n }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 440,
        "wires": [
            [
                "d8b59c5d76ea73f1"
            ]
        ]
    },
    {
        "id": "dd3d61ef8f68b827",
        "type": "catch",
        "z": "37cd53309e7f43c7",
        "name": "Capture Errors",
        "scope": null,
        "uncaught": false,
        "x": 560,
        "y": 40,
        "wires": [
            [
                "e069cdd5f5f8c46b",
                "a710740bb8a508dc"
            ]
        ]
    },
    {
        "id": "e069cdd5f5f8c46b",
        "type": "debug",
        "z": "37cd53309e7f43c7",
        "name": "Errors - Full Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 40,
        "wires": []
    },
    {
        "id": "a710740bb8a508dc",
        "type": "debug",
        "z": "37cd53309e7f43c7",
        "name": "Errors - Just message",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 80,
        "wires": []
    },
    {
        "id": "bb217550c86ff353",
        "type": "debug",
        "z": "37cd53309e7f43c7",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 260,
        "wires": []
    },
    {
        "id": "2e15ae3df57ccf24",
        "type": "debug",
        "z": "37cd53309e7f43c7",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 180,
        "wires": []
    },
    {
        "id": "9eed141bbf039802",
        "type": "debug",
        "z": "37cd53309e7f43c7",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.hass.discovery.payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 300,
        "wires": []
    },
    {
        "id": "1c5ccbe440e664ff",
        "type": "debug",
        "z": "37cd53309e7f43c7",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 320,
        "wires": []
    },
    {
        "id": "e91c30e34e1fe486",
        "type": "inject",
        "z": "17ba2a746cf7e369",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "START",
        "payloadType": "str",
        "x": 200,
        "y": 200,
        "wires": [
            [
                "a713247b712ee1df"
            ]
        ]
    },
    {
        "id": "e74d0b1834308aa3",
        "type": "catch",
        "z": "17ba2a746cf7e369",
        "name": "Capture Errors",
        "scope": null,
        "uncaught": false,
        "x": 940,
        "y": 40,
        "wires": [
            [
                "b00c0ceb1e1013b9",
                "aab9245daca88cc1"
            ]
        ]
    },
    {
        "id": "b00c0ceb1e1013b9",
        "type": "debug",
        "z": "17ba2a746cf7e369",
        "name": "Errors - Full Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 40,
        "wires": []
    },
    {
        "id": "c1a7550861894abb",
        "type": "rbe",
        "z": "17ba2a746cf7e369",
        "name": "Block Repeat Messages",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 850,
        "y": 200,
        "wires": [
            [
                "15417e6acce9c0e9"
            ]
        ]
    },
    {
        "id": "a713247b712ee1df",
        "type": "sse-client",
        "z": "17ba2a746cf7e369",
        "name": "Start Event Flow",
        "url": "http://192.168.1.4:8080/rest/events",
        "events": [],
        "headers": {},
        "proxy": "",
        "restart": true,
        "rejectUnauthorized": false,
        "withCredentials": false,
        "timeout": "30",
        "x": 280,
        "y": 240,
        "wires": [
            [
                "ecfe9abd98cef9e9"
            ]
        ]
    },
    {
        "id": "160663450809ec7a",
        "type": "mqtt out",
        "z": "17ba2a746cf7e369",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4410210f.6939c",
        "x": 1270,
        "y": 200,
        "wires": []
    },
    {
        "id": "ecfe9abd98cef9e9",
        "type": "function",
        "z": "17ba2a746cf7e369",
        "name": "Format Event Message",
        "func": "msg.payload = JSON.parse(msg.payload)\n//msg.payload.payload = JSON.parse(msg.payload.payload)\n\nmsg1 = {}\nmsg1.payload = JSON.parse(msg.payload.payload)\nmsg1.topic = msg.payload.topic\nmsg1.event = msg.event\nswitch(msg1.payload.type) {\n    case \"String\":\n        msg1.payload.value = msg1.payload.value.toLowerCase()\n        break;\n}\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 200,
        "wires": [
            [
                "fefd79b1e9a18b2d"
            ]
        ]
    },
    {
        "id": "a42110339b45529b",
        "type": "comment",
        "z": "17ba2a746cf7e369",
        "name": "This section connects to the OneControl system and pulls down event and state change info and writes it to MQTT",
        "info": "",
        "x": 420,
        "y": 40,
        "wires": []
    },
    {
        "id": "aab9245daca88cc1",
        "type": "debug",
        "z": "17ba2a746cf7e369",
        "name": "Errors - Just message",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 80,
        "wires": []
    },
    {
        "id": "c22aac79125f9da6",
        "type": "debug",
        "z": "17ba2a746cf7e369",
        "name": "Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 240,
        "wires": []
    },
    {
        "id": "15417e6acce9c0e9",
        "type": "function",
        "z": "17ba2a746cf7e369",
        "name": "Data Format Conversions *",
        "func": "\n\n// ***** Reformat hvac_mode.  Openhab uses \"heatcool\", and Home Assistant uses \"heat_cool\"\nif (msg.topic.includes(\"idsmyrv_hvac_thing_\")  === true &&\n        msg.topic.includes(\"_hvac_mode/state\")  === true && \n        msg.payload.value.includes(\"heatcool\")  === true){\n        msg.payload.value = \"heat_cool\"\n}\n/*\n// OneControl uses HSV color codes for RGB light objects, but HA only knows HS.  This will get the \n//  brightness from OneControl, and save it as a flow variable.  When it is up dated by either HA or OneControl,\n//  it is appended to the HS value from HomeAssistant before being sent to OneControl\n if (msg.topic.includes(\"idsmyrv_rgb_light_thing_\")  === true &&\n        msg.topic.includes(\"_hsvcolor/state\")  === true && \n        msg.topic.includes(\"_hsvcolor/statechanged\")  === false && \n        msg.payload.type.includes(\"HSB\")  === true){\n            i = msg.topic.split(\"/\")\n            j = i[2].split(\"_\")\n            msg1 = {}\n            values = msg.payload.value.split(\",\")\n            msg1.payload = values[0]+\",\"+ values[1]\n            msg1.topic = msg.topic\n            msg1.i = j\n            node.send(msg1)\n            msg1.topic = \"smarthome/items/\" + j[0] +\"_\"+ j[1] +\"_\"+ j[2] +\"_\"+j[3] +\"_\"+j[4] +\"_dimmer/ha_state\"\n            msg1.payload = values[2]\n            node.send(msg1)\n            msg = null\n    }\n    */\nif (msg.topic.includes(\"smarthome/things/idsmyrv:\")  === true) {\n    msg.retain = true\n}\n\n// OneControl uses the same topic for the ON/OFF and brightness values for dimmable lights.  To make things cleaner \n//   on our interface, we will split the inbound values and copy them to separate state topics - brightness and switch.\n//   Home Assistant will read the values from these two topics but write to the topic expected by OneControl - dimmer.\n//     Example:\n//       1) Inbound message comes to 'smarthome/items/idsmyrv_light_thing_0000000DA6BB1407_dimmer/state'\n//          Typical payload looks like '{\"type\":\"Percent\",\"value\":\"61\"}' or '{\"type\":\"OnOff\",\"value\":\"off\"}''\n//       2) Node Red splits the contents based on whether the value is a \"type\" is \"Percent\" or \"OnOff\n//       3) \"Percent\" is sent to 'smarthome/items/idsmyrv_light_thing_0000000DA6BB1407_brightness/state'\n//       4) \"OnOff\" is sent to 'smarthome/items/idsmyrv_light_thing_0000000DA6BB1407_switch/state'\nif (msg.topic.includes(\"_dimmer/state\") === true ) {\n    msg1 = {}\n    msg1.payload = msg.payload.value\n    switch (msg.payload.type) {\n        case \"Percent\":\n            msg1.topic = msg.topic.replace(\"_dimmer\",\"_brightness\")\n            node.send(msg1)\n            break;\n        case \"OnOff\":\n            msg1.topic = msg.topic.replace(\"_dimmer\",\"_switch\")\n            node.send(msg1)\n            break;\n        }\n}\n\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 240,
        "wires": [
            [
                "160663450809ec7a",
                "c22aac79125f9da6",
                "43a20764388ef3ed"
            ]
        ],
        "info": "This node is used to translate between the two platforms.  In come cases, values need to be in upper case, some lower case, and some different vlaues entirely."
    },
    {
        "id": "fefd79b1e9a18b2d",
        "type": "function",
        "z": "17ba2a746cf7e369",
        "name": "Raw Data Format Conversions *",
        "func": "function roundNum0(i) {\n    i = Number(i)\n    i = i.toFixed(0)\n    i = Number(i)\n    return i\n}\n\nfunction roundNum1(i) {\n    i = Number(i)\n    i = i.toFixed(1)\n    i = Number(i)\n    return i\n}\n\n// Round amperage to .1\nif (msg.topic.includes(\"smarthome/items/idsmyrv_\")  === true &&\n        msg.topic.includes(\"_current/state\")  === true && \n        msg.payload.type.includes(\"Decimal\")  === true){\n    msg.payload.value = roundNum1(msg.payload.value)\n}\n\nif (msg.topic.includes(\"smarthome/items/idsmyrv_\")  === true &&\n        msg.topic.includes(\"statechanged\")  === true ) {\n            switch(msg.payload.type) {\n                case \"Decimal\":\n                    msg.payload.value = roundNum0(msg.payload.value)\n                    break;\n                case \"String\":\n                    msg.payload.value = msg.payload.value.toLowerCase()\n                    break;\n            }\n            switch(msg.payload.oldType) {\n                case \"Decimal\":\n                    msg.payload.oldValue = roundNum0(msg.payload.oldValue)\n                    break;\n                case \"String\":\n                    msg.payload.oldValue = msg.payload.oldValue.toLowerCase()\n                    break;\n            }\n        }\n\n\n\n// Round temperature to .0\nif (msg.topic.includes(\"smarthome/items/idsmyrv_\")  === true &&\n        msg.topic.includes(\"_temperature/state\")  === true && \n        msg.payload.type.includes(\"Decimal\")  === true){\n    msg.payload.value = roundNum0(msg.payload.value)\n}\n\n// Round HS values from HA\n\n\n// Force lowercase status modes\nif (msg.topic.includes(\"smarthome/things/idsmyrv:\")  === true &&\n        msg.topic.includes(\"/status\")  === true &&\n        msg.topic.includes(\"/statuschanged\")  === false) {\n    msg.payload.status = msg.payload.status.toLowerCase()\n    msg.payload.statusDetail = msg.payload.statusDetail.toLowerCase()\n}\n\nif (typeof(msg.payload.value) == \"string\") {\n    msg.payload.value = msg.payload.value.toLowerCase()\n}\n\n\nreturn msg;\n\n/*\n// Force lowercase statuschanged modes\nif (msg.topic.includes(\"smarthome/things/idsmyrv:\")  === true &&\n        msg.topic.includes(\"/statuschanged\")  === true &&\n        msg.payload.type.includes(\"String\")  === true ) {\n    msg.payload.value = msg.payload.value.toLowerCase()\n    if (msg.payload.oldType === \"String\") {\n       msg.payload.oldValue = msg.payload.oldValue.toLowerCase()\n }\n\nsmarthome/items/idsmyrv_hvac_thing_0000000DA7271001_hvac_mode/state\n\n\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 240,
        "wires": [
            [
                "c1a7550861894abb"
            ]
        ],
        "info": "This node is used to round decimal values down to reasonable sizes to minimize the number of state changes as well as \nthe number of MQTT messages that need to be processed.  It is also used to force certain values to lowercase which is needed for compatibility with Home Assistance"
    },
    {
        "id": "675f55b4ae255e90",
        "type": "mqtt in",
        "z": "17ba2a746cf7e369",
        "name": "OneControl MQTT SET messages",
        "topic": "smarthome/items/+/set",
        "qos": "2",
        "datatype": "auto",
        "broker": "4410210f.6939c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 380,
        "wires": [
            [
                "4697d94ef4c22dcc"
            ]
        ]
    },
    {
        "id": "53391f39994a7976",
        "type": "http request",
        "z": "17ba2a746cf7e369",
        "name": "OneControl API Call",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 800,
        "y": 420,
        "wires": [
            [
                "fc1cc23d58757da7"
            ]
        ]
    },
    {
        "id": "0a884113eff4a715",
        "type": "debug",
        "z": "17ba2a746cf7e369",
        "name": "200 Success",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 340,
        "wires": []
    },
    {
        "id": "563a87513e2984b8",
        "type": "function",
        "z": "17ba2a746cf7e369",
        "name": "Format Message",
        "func": "function roundNum0(i) {\n    i = Number(i)\n    i = i.toFixed(0)\n    i = Number(i)\n    return i\n}\n\nvar msg1 = {}\n\nmsg1.item = msg.topic.split(\"/\")\nmsg1.foo = typeof(msg.payload)\nmsg1.headers = {\"Content-Type\": \"text/plain\", \"Accept\": \"application/json\"}\nif (typeof(msg.payload) == \"string\") {\n    msg1.payload = msg.payload.toUpperCase()\n}\n\nif (typeof(msg.payload) == \"number\") {\n    msg1.payload = roundNum0(msg.payload)\n}\nmsg1.url = \"http://192.168.1.4:8080/rest/items/\"+ msg1.item[2]\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "53391f39994a7976"
            ]
        ]
    },
    {
        "id": "4697d94ef4c22dcc",
        "type": "function",
        "z": "17ba2a746cf7e369",
        "name": "Outbound Data Format Conversions *",
        "func": "function roundNum0(i) {\n    i = Number(i)\n    i = i.toFixed(0)\n    i = Number(i)\n    return i\n}\n\n// ***** Reformat hvac_mode.  Openhab uses \"heatcool\", and Home Assistant uses \"heat_cool\"\nif (msg.topic.includes(\"/idsmyrv_hvac_thing_\")  === true &&\n        msg.topic.includes(\"_hvac_mode/state\")  === true && \n        msg.payload.includes(\"heat_cool\")  === true){\n    msg.payload= \"heatcool\"\n}\n\n// ***** Remove trailing zero from temp setting\nif (msg.topic.includes(\"/idsmyrv_hvac_thing_\")  === true &&\n        msg.topic.includes(\"_temperature/set\")  === true ){\n    msg.payload= roundNum0(msg.payload)\n}\n\nreturn msg;\n/*\n\n\nsmarthome/items/idsmyrv_hvac_thing_0000000DA7271001_hvac_mode/state\n\n\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 420,
        "wires": [
            [
                "563a87513e2984b8"
            ]
        ],
        "info": "This node is used to translate between the two platforms.  In come cases, values need to be in upper case, some lower case, and some different vlaues entirely."
    },
    {
        "id": "fc1cc23d58757da7",
        "type": "switch",
        "z": "17ba2a746cf7e369",
        "name": "HTTP Status Code",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 380,
        "wires": [
            [
                "0a884113eff4a715"
            ],
            [
                "0cf94585e73abb7d"
            ]
        ]
    },
    {
        "id": "0cf94585e73abb7d",
        "type": "debug",
        "z": "17ba2a746cf7e369",
        "name": "Others",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 400,
        "wires": []
    },
    {
        "id": "d1bfc1f6c682d98f",
        "type": "mqtt in",
        "z": "17ba2a746cf7e369",
        "name": "Watch for Device Status Messages",
        "topic": "smarthome/things/+/status",
        "qos": "2",
        "datatype": "auto",
        "broker": "4410210f.6939c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 540,
        "wires": [
            [
                "b78cb52b45d977ea"
            ]
        ]
    },
    {
        "id": "b78cb52b45d977ea",
        "type": "debug",
        "z": "17ba2a746cf7e369",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 540,
        "wires": []
    },
    {
        "id": "43a20764388ef3ed",
        "type": "switch",
        "z": "17ba2a746cf7e369",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "smarthome/items/idsmyrv_light_thing_0000000DA6BB1407_brightness",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1270,
        "y": 280,
        "wires": [
            [
                "23f606f533f76560"
            ]
        ]
    },
    {
        "id": "23f606f533f76560",
        "type": "debug",
        "z": "17ba2a746cf7e369",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 280,
        "wires": []
    }
]